//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec Fluke.Shared.Domain

module FlukeTime =
    open Fluke.Shared.Domain.Model
    let Hour (x: FlukeTime) = x.Hour
    let Minute (x: FlukeTime) = x.Minute
    let create (hour: Hour) (minute: Minute) : FlukeTime = { Hour = hour; Minute = minute }
    let map (mapHour: Hour -> Hour) (mapMinute: Minute -> Minute) (record': FlukeTime) =
        { record' with
              Hour = mapHour record'.Hour
              Minute = mapMinute record'.Minute }
namespace rec Fluke.Shared.Domain

module Information =
    open Fluke.Shared.Domain.Model
    let toString (x: Information) =
        match x with
        | Project _ -> "Project"
        | Area _ -> "Area"
        | Resource _ -> "Resource"

    let fromString (x: string) =
        match x with
        | _ -> None

    let toTag (x: Information) =
        match x with
        | Project _ -> 0
        | Area _ -> 1
        | Resource _ -> 2

    let isProject (x: Information) =
        match x with
        | Project _ -> true
        | _ -> false

    let isArea (x: Information) =
        match x with
        | Area _ -> true
        | _ -> false

    let isResource (x: Information) =
        match x with
        | Resource _ -> true
        | _ -> false
namespace rec Fluke.Shared.Domain

module Priority =
    open Fluke.Shared.Domain.Model
    let toString (x: Priority) =
        match x with
        | Low1 -> "Low1"
        | Low2 -> "Low2"
        | Low3 -> "Low3"
        | Medium4 -> "Medium4"
        | Medium5 -> "Medium5"
        | Medium6 -> "Medium6"
        | High7 -> "High7"
        | High8 -> "High8"
        | High9 -> "High9"
        | Critical10 -> "Critical10"

    let fromString (x: string) =
        match x with
        | "Low1" -> Some Low1
        | "Low2" -> Some Low2
        | "Low3" -> Some Low3
        | "Medium4" -> Some Medium4
        | "Medium5" -> Some Medium5
        | "Medium6" -> Some Medium6
        | "High7" -> Some High7
        | "High8" -> Some High8
        | "High9" -> Some High9
        | "Critical10" -> Some Critical10
        | _ -> None

    let toTag (x: Priority) =
        match x with
        | Low1 -> 0
        | Low2 -> 1
        | Low3 -> 2
        | Medium4 -> 3
        | Medium5 -> 4
        | Medium6 -> 5
        | High7 -> 6
        | High8 -> 7
        | High9 -> 8
        | Critical10 -> 9

    let isLow1 (x: Priority) =
        match x with
        | Low1 -> true
        | _ -> false

    let isLow2 (x: Priority) =
        match x with
        | Low2 -> true
        | _ -> false

    let isLow3 (x: Priority) =
        match x with
        | Low3 -> true
        | _ -> false

    let isMedium4 (x: Priority) =
        match x with
        | Medium4 -> true
        | _ -> false

    let isMedium5 (x: Priority) =
        match x with
        | Medium5 -> true
        | _ -> false

    let isMedium6 (x: Priority) =
        match x with
        | Medium6 -> true
        | _ -> false

    let isHigh7 (x: Priority) =
        match x with
        | High7 -> true
        | _ -> false

    let isHigh8 (x: Priority) =
        match x with
        | High8 -> true
        | _ -> false

    let isHigh9 (x: Priority) =
        match x with
        | High9 -> true
        | _ -> false

    let isCritical10 (x: Priority) =
        match x with
        | Critical10 -> true
        | _ -> false

